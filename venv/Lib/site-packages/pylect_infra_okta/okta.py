import configparser
import argparse
import os
import re
import shutil
import sys
from pathlib import Path
import subprocess
import requests

default_command = "gimme-aws-creds"
aux_command = "pylect-infra-okta"

# configuration path
home = os.path.expanduser("~")
okta_config_file_name = '.okta_aws_login_config'
okta_config_file_path = os.path.join(home, okta_config_file_name)


# workaround to some Windows' PATH issue
# taken from: https://stackoverflow.com/a/16571630/220949
from io import StringIO
import sys
class Capturing(list):
    def __enter__(self):
        self._stdout = sys.stdout
        sys.stdout = self._stringio = StringIO()
        return self
    def __exit__(self, *args):
        self.extend(self._stringio.getvalue().splitlines())
        del self._stringio    # free up some memory
        sys.stdout = self._stdout

def get_args():
    parser = argparse.ArgumentParser(description='Description', add_help=True)
    parser.add_argument("-r", "--remove-creds", action="store_true",
        help="Remove local temporary credentials. This option only deletes locally saved credentials, it does not log out from Okta the temporary session token.")

    parser.add_argument("-s", "--setup", action='store_true',
        help="Setup pylect-infra-okta for use")

    parser.add_argument("-d", "--debug_options", action='store_true',
        help="Debug options passed and exit")

    # parser.add_argument("-p", "--print_credentials", action='store_true', default=True
        # help="Print credentials")

    parser.add_argument("-u", "--update_string", action='store_true',
        help="Show update string and exit")


    # parser.set_defaults(action='login')

    args = parser.parse_known_args()

    # if not any(vars(args).values()):
    #     parser.parse_args(['--help'])
    #     # parser.error('No arguments provided.')

    if args[0].debug_options:
        print(args)
        sys.exit()

    return args

def print_profile_information(output):
    """ parses output to print information """

    output_lines = output

    profile_name = None
    credentials_location = None
    for line in output_lines:
        if re.search(' as (.*)$', line):
            profile_name = re.search(' as (.*)$', line)[1]
        if re.search(' to (.*)$', line):
            credentials_location = re.search(' to (.*)$', line)[1]

        if not profile_name or not credentials_location:
            continue

        print()
        print('Profile(s):')
        print(f"[{profile_name}]")

        config = configparser.ConfigParser()
        config.read(credentials_location)

        sections = config.sections()
        deleted_sections = 0
        for key, value in config.items(profile_name):
            print(key)
            print(value)
            print()

        profile_name = None
        credentials_location = None

def get_update_string():
    """Returns an update string"""

    return "pip3 install git+ssh://git@bitbucket.org/annalect/pylect-infra-okta.git@v.2.x --upgrade"

def main():
    """ put your code here """
    args, unknown_args = get_args()

    if args.remove_creds:
        remove_credentials()
    elif args.setup:
        setup()
    elif args.update_string:
        print(get_update_string())
        sys.exit()
    else:
        sys.argv = [sys.argv[0]] + unknown_args
        try:
            okta_org_url = get_config_value('okta_org_url')
            print()
            print(f"Using Okta at {okta_org_url}")
            print()
            with Capturing() as output:
                from gimme_aws_creds.main import GimmeAWSCreds
                GimmeAWSCreds().run()
        except KeyboardInterrupt:
            print()
            print('Interrupt detected. Exiting gracefully.')
        except requests.exceptions.HTTPError as error:
            print()
            print(f'Error in requests: {error}')
            print('(Usually means an incorrect MFA token)')
            print()


        finally:
            # if args.print_credentials:
            output_str = "\n".join(output).strip()
            if output_str:
                print("Output:")
                print("\n".join(output))
                print_profile_information(output)

            # else:
                # print('If you want to see all output, please use the -p flag.')



def write_conf_file(verbose=True, **kwargs):
    okta_config_file_path = kwargs["path"]
    globalemail = kwargs["email"]

    default_file = f"""[DEFAULT]
okta_org_url = https://onewp.okta.com
okta_auth_server =
client_id =
gimme_creds_server = appurl
aws_appname =
aws_rolename =
write_aws_creds = True
cred_profile = acc-role
okta_username = {globalemail}
app_url = https://onewp.okta.com/app/amazon_aws/exk92g7u1pSKRqT1A357/sso/saml
resolve_aws_alias = True
preferred_mfa_type = token
remember_device = True
aws_default_duration = 43200
device_token =
output_format = export
"""

    with open(okta_config_file_path, 'w') as fh:
        fh.write(default_file)
        if verbose:
            print(f"Configuration file written: {okta_config_file_path}")

def get_config_value(key, section="DEFAULT"):
    """Returns a configuration value"""

    config = configparser.ConfigParser()
    config.read(okta_config_file_path)

    return config[section][key]


def remove_credentials():
    home = str(Path.home())
    credentials_location = os.environ.get('AWS_SHARED_CREDENTIALS_FILE')
    if not credentials_location:
        credentials_location = os.path.join(home,'.aws','credentials')

    if not os.path.exists(credentials_location):
        sys.exit(f"Credentials file could be found at '{credentials_location}'")

    config = configparser.ConfigParser()
    config.read(credentials_location)

    sections = config.sections()
    deleted_sections = 0
    for section in sections:
        if config.has_option(section, 'aws_session_token') and config.has_option(section, 'aws_security_token'):
        # if re.match('OMG-Annalect-AWS', section):
            deleted_sections += 1
            print(f"Delete section: {section}")
            config.remove_section(section)

    if deleted_sections > 0:
        while True:
            ans = input('Are you sure you want to delete above mentioned profiles? [y/N]:') or 'N'
            if ans.lower() not in ['y','n']:
                continue
            ans = ans.strip()
            if ans != 'y' or not ans:
                print(f"You answered '{ans}'. Not deleting anything.")
                sys.exit(0)
            break

        with open(credentials_location, 'w') as fh:
            config.write(fh)
            print(f"{deleted_sections} credentials removed from local profile '{credentials_location}'.")
            print("Please be aware that the credentials remain valid for 12h after generation")
    else:
        print(f"Nothing was found to be deleted in {credentials_location}.")

def print_usage():
    print("\n\n")
    print("******************************")
    print("Instructions:")
    print(f"Get your Okta credentials by running command: {aux_command}")
    print(f"See your available roles by running: {aux_command} --action-list-roles")
    print(f"Verify your setup with a simple command as, e.g.: aws --profile <role-name> sts get-caller-identity\n")

#     print(f"""\n\nExample:

#     $ {aux_command}
#     Using password from keyring for my.email@global.com
#     Multi-factor Authentication required.
#     Preferred factor type of token not available.
#     Pick a factor:
#     [0] token:software:totp( GOOGLE ) : my.email@global.com
#     Selection: 0
#     Enter verification code: 998877
#     Saving arn:aws:iam::8877665554443:role/My-Role-Name as My-Role-Name

# Notice your the value of the roles you can use               ^^^^^^^^^

# You can now run the AWS CLI like:

#     aws --profile My-Role-Name s3 ls s3://mybucket/folder/

# """)

def create_aux_command():
    # find path of default_command and do a copy to aux_command
    command_pathname = os.path.dirname(shutil.which(default_command))

    src = os.path.join(command_pathname, default_command)
    dest = os.path.join(command_pathname, aux_command)
    shutil.copy2(src, dest)

def setup():
    overwrite_conf = False
    conf_exits = os.path.exists(okta_config_file_path)
    if conf_exits:
        ans = input('Default configuration file alreay exists. Overwrite? y/N: ')
        if ans != 'y':
            print('You chose not to overwrite the default configuration file')
        else:
            overwrite_conf = True

    if not conf_exits or overwrite_conf:
        useremail = input('Please input you email address (e.g.: my.email@annalect.com): ')
        try:
            email_parts = useremail.split("@")
            base = email_parts[0]
            globalemail = f"{base}@annalect.com"
        except Exception as error:
            print(f'ERROR: "{error}". Please check your email is of the form "my.email@host.com"')
            sys.exit(1)

        write_conf_file(email=globalemail, path=okta_config_file_path)

    # create_aux_command()
    print_usage()

    # print("Configuration finished successfully.")


if __name__ == '__main__':
    args, unknown_args = get_args()

    main()